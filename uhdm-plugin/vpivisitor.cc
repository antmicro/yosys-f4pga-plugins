/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_visitor.cpp
 * Author: alain
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <string.h>

#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <vector>

static bool showIDs = false;

#ifdef STANDARD_VPI

#include <sv_vpi_user.h>

// C++ 98 is default in Simulators compilers
typedef std::set<vpiHandle> VisitedContainer;
// Missing defines from vpi_user.h, sv_vpi_user.h, They are no-op in the Standard implementation.
#define uhdmdesign 2569
#define uhdmallPackages 2570
#define uhdmallClasses 2571
#define uhdmallInterfaces 2572
#define uhdmallUdps 2573
#define uhdmallPrograms 2574
#define uhdmallModules 2575
#define uhdmtopModules 2576
#define vpiDesign 3000
#define vpiInterfaceTypespec 3001
#define vpiNets 3002
#define vpiSimpleExpr 3003
#define vpiParameters 3004
#define vpiSequenceExpr 3005
#define vpiUnsupportedStmt 4000
#define vpiUnsupportedExpr 4001
#define uhdmimport 2577

#else

#include "include/sv_vpi_user.h"
#include "include/vhpi_user.h"
#include "headers/uhdm_types.h"
#include "headers/containers.h"
#include "headers/vpi_uhdm.h"
#include "headers/uhdm.h"
#include "headers/Serializer.h"
typedef  std::set<const UHDM::BaseClass*> VisitedContainer;

#endif

// UHDM implementation redefine these
#ifndef vpiVarBit
  #define vpiVarBit          vpiRegBit 
  #define vpiLogicVar        vpiReg
  #define vpiArrayVar        vpiRegArray
#endif


namespace UHDM {
  
#ifdef STANDARD_VPI

static std::string vpiTypeName(vpiHandle h) {
  int type = vpi_get(vpiType, h);
  switch (type) {
    case 35: return "vpiNamedFork";
    case 611: return "vpiShortIntVar";
    case 36: return "vpiNet";
    case 612: return "vpiIntVar";
    case 37: return "vpiNetBit";
    case 613: return "vpiShortRealVar";
    case 38: return "vpiNullStmt";
    case 614: return "vpiByteVar";
    case 40: return "vpiParamAssign";
    case 39: return "vpiOperation";
    case 615: return "vpiClassVar";
    case 41: return "vpiParameter";
    case 616: return "vpiStringVar";
    case 42: return "vpiPartSelect";
    case 617: return "vpiEnumVar";
    case 43: return "vpiPathTerm";
    case 618: return "vpiStructVar";
    case 44: return "vpiPort";
    case 619: return "vpiUnionVar";
    case 620: return "vpiBitVar";
    case 45: return "vpiPortBit";
    case 621: return "vpiClassObj";
    case 46: return "vpiPrimTerm";
    case 622: return "vpiChandleVar";
    case 47: return "vpiRealVar";
    case 623: return "vpiPackedArrayVar";
    case 624: return "vpiAlwaysType";
    case 48: return "vpiReg";
    case 49: return "vpiRegBit";
    case 50: return "vpiRelease";
    case 625: return "vpiLongIntTypespec";
    case 51: return "vpiRepeat";
    case 626: return "vpiShortRealTypespec";
    case 52: return "vpiRepeatControl";
    case 627: return "vpiByteTypespec";
    case 53: return "vpiSchedEvent";
    case 628: return "vpiShortIntTypespec";
    case 54: return "vpiSpecParam";
    case 629: return "vpiIntTypespec";
    case 630: return "vpiClassTypespec";
    case 55: return "vpiSwitch";
    case 631: return "vpiStringTypespec";
    case 56: return "vpiSysFuncCall";
    case 632: return "vpiChandleTypespec";
    case 57: return "vpiSysTaskCall";
    case 633: return "vpiEnumTypespec";
    case 58: return "vpiTableEntry";
    case 634: return "vpiEnumConst";
    case 59: return "vpiTask";
    case 60: return "vpiTaskCall";
    case 635: return "vpiIntegerTypespec";
    case 61: return "vpiTchk";
    case 636: return "vpiTimeTypespec";
    case 62: return "vpiTchkTerm";
    case 637: return "vpiRealTypespec";
    case 63: return "vpiTimeVar";
    case 638: return "vpiStructTypespec";
    case 64: return "vpiTimeQueue";
    case 639: return "vpiUnionTypespec";
    case 640: return "vpiBitTypespec";
    case 65: return "vpiUdp";
    case 641: return "vpiLogicTypespec";
    case 66: return "vpiUdpDefn";
    case 642: return "vpiArrayTypespec";
    case 67: return "vpiUserSystf";
    case 643: return "vpiVoidTypespec";
    case 68: return "vpiVarSelect";
    case 644: return "vpiTypespecMember";
    case 69: return "vpiWait";
    case 70: return "vpiWhile";
    case 645: return "vpiDistItem";
    case 646: return "vpiAliasStmt";
    case 71: return "vpiCondition";
    case 647: return "vpiThread";
    case 72: return "vpiDelay";
    case 648: return "vpiMethodFuncCall";
    case 73: return "vpiElseStmt";
    case 649: return "vpiMethodTaskCall";
    case 74: return "vpiForIncStmt";
    case 650: return "vpiClockingBlock";
    case 75: return "vpiForInitStmt";
    case 651: return "vpiClockingIODecl";
    case 76: return "vpiHighConn";
    case 652: return "vpiClassDefn";
    case 77: return "vpiLhs";
    case 653: return "vpiConstraint";
    case 78: return "vpiIndex";
    case 654: return "vpiConstraintOrdering";
    case 655: return "vpiPropertyDecl";
    case 79: return "vpiLeftRange";
    case 80: return "vpiLowConn";
    case 656: return "vpiPropertySpec";
    case 81: return "vpiParent";
    case 657: return "vpiPropertyExpr";
    case 82: return "vpiRhs";
    case 658: return "vpiMulticlockSequenceExpr";
    case 83: return "vpiRightRange";
    case 660: return "vpiPropertyInst";
    case 659: return "vpiClockedSeq";
    case 84: return "vpiScope";
    case 661: return "vpiSequenceDecl";
    case 85: return "vpiSysTfCall";
    case 662: return "vpiCaseProperty";
    case 86: return "vpiTchkDataTerm";
    case 663: return "vpiEndLine";
    case 87: return "vpiTchkNotifier";
    case 664: return "vpiSequenceInst";
    case 88: return "vpiTchkRefTerm";
    case 0: return "vpiLargeCharge";
    case 665: return "vpiImmediateAssert";
    case 1: return "vpiAlways";
    case 89: return "vpiArgument";
    case 90: return "vpiBit";
    case 666: return "vpiReturn";
    case 2: return "vpiAssignStmt";
    case 91: return "vpiDriver";
    case 667: return "vpiAnyPattern";
    case 3: return "vpiAssignment";
    case 92: return "vpiInternalScope";
    case 668: return "vpiTaggedPattern";
    case 4: return "vpiBegin";
    case 93: return "vpiLoad";
    case 670: return "vpiDoWhile";
    case 669: return "vpiStructPattern";
    case 5: return "vpiCase";
    case 94: return "vpiModDataPathIn";
    case 671: return "vpiOrderedWait";
    case 6: return "vpiCaseItem";
    case 95: return "vpiModPathIn";
    case 672: return "vpiWaitFork";
    case 7: return "vpiConstant";
    case 96: return "vpiModPathOut";
    case 673: return "vpiDisableFork";
    case 8: return "vpiContAssign";
    case 97: return "vpiOperand";
    case 674: return "vpiExpectStmt";
    case 9: return "vpiDeassign";
    case 98: return "vpiPortInst";
    case 675: return "vpiForeachStmt";
    case 99: return "vpiProcess";
    case 676: return "vpiFinal";
    case 677: return "vpiExtends";
    case 678: return "vpiDistribution";
    case 680: return "vpiEnumNet";
    case 679: return "vpiSeqFormalDecl";
    case 681: return "vpiIntegerNet";
    case 682: return "vpiTimeNet";
    case 683: return "vpiStructNet";
    case 684: return "vpiBreak";
    case 685: return "vpiContinue";
    case 686: return "vpiAssert";
    case 687: return "vpiAssume";
    case 688: return "vpiCover";
    case 700: return "vpiActual";
    case 690: return "vpiClockingEvent";
    case 689: return "vpiDisableCondition";
    case 701: return "vpiTypedefAlias";
    case 691: return "vpiReturnStmt";
    case 702: return "vpiIndexTypespec";
    case 692: return "vpiPackedArrayTypespec";
    case 703: return "vpiBaseTypespec";
    case 693: return "vpiPackedArrayNet";
    case 704: return "vpiElemTypespec";
    case 694: return "vpiImmediateAssume";
    case 695: return "vpiImmediateCover";
    case 706: return "vpiInputSkew";
    case 696: return "vpiSequenceTypespec";
    case 707: return "vpiOutputSkew";
    case 697: return "vpiPropertyTypespec";
    case 708: return "vpiGlobalClocking";
    case 698: return "vpiEventTypespec";
    case 710: return "vpiDefaultDisableIff";
    case 709: return "vpiDefaultClocking";
    case 699: return "vpiPropFormalDecl";
    case 713: return "vpiOrigin";
    case 714: return "vpiPrefix";
    case 715: return "vpiWith";
    case 718: return "vpiProperty";
    case 720: return "vpiValueRange";
    case 721: return "vpiPattern";
    case 722: return "vpiWeight";
    case 725: return "vpiTypedef";
    case 726: return "vpiImport";
    case 727: return "vpiDerivedClasses";
    case 100: return "vpiVariables";
    case 728: return "vpiVirtualInterfaceVar";
    case 730: return "vpiMethods";
    case 101: return "vpiUse";
    case 731: return "vpiSolveBefore";
    case 102: return "vpiExpr";
    case 732: return "vpiSolveAfter";
    case 103: return "vpiPrimitive";
    case 104: return "vpiStmt";
    case 734: return "vpiWaitingProcesses";
    case 105: return "vpiAttribute";
    case 735: return "vpiMessages";
    case 106: return "vpiBitSelect";
    case 736: return "vpiConstrForEach";
    case 107: return "vpiCallback";
    case 737: return "vpiLoopVars";
    case 108: return "vpiDelayTerm";
    case 738: return "vpiConstrIf";
    case 109: return "vpiDelayDevice";
    case 110: return "vpiFrame";
    case 740: return "vpiConcurrentAssertions";
    case 739: return "vpiConstrIfElse";
    case 111: return "vpiGateArray";
    case 741: return "vpiMatchItem";
    case 112: return "vpiModuleArray";
    case 742: return "vpiMember";
    case 113: return "vpiPrimitiveArray";
    case 743: return "vpiElement";
    case 114: return "vpiNetArray";
    case 744: return "vpiAssertion";
    case 115: return "vpiRange";
    case 745: return "vpiInstance";
    case 116: return "vpiRegArray";
    case 746: return "vpiConstraintItem";
    case 117: return "vpiSwitchArray";
    case 747: return "vpiConstraintExpr";
    case 118: return "vpiUdpArray";
    case 748: return "vpiElseConst";
    case 119: return "vpiActiveTimeFormat";
    case 120: return "vpiInTerm";
    case 750: return "vpiCoverageStart";
    case 749: return "vpiImplication";
    case 121: return "vpiInstanceArray";
    case 751: return "vpiCoverageStOp";
    case 122: return "vpiLocalDriver";
    case 752: return "vpiCoverageReset";
    case 123: return "vpiLocalLoad";
    case 753: return "vpiCoverageCheck";
    case 124: return "vpiOutTerm";
    case 754: return "vpiCoverageMerge";
    case 125: return "vpiPorts";
    case 755: return "vpiCoverageSave";
    case 126: return "vpiSimNet";
    case 127: return "vpiTaskFunc";
    case 128: return "vpiContAssignBit";
    case 758: return "vpiFsm";
    case 129: return "vpiNamedEventArray";
    case 130: return "vpiIndexedPartSelect";
    case 759: return "vpiFsmHandle";
    case 760: return "vpiAssertCoverage";
    case 131: return "vpiBaseExpr";
    case 761: return "vpiFsmStateCoverage";
    case 132: return "vpiWidthExpr";
    case 762: return "vpiStatementCoverage";
    case 133: return "vpiGenScopeArray";
    case 763: return "vpiToggleCoverage";
    case 134: return "vpiGenScope";
    case 135: return "vpiGenVar";
    case 765: return "vpiCovered";
    case 136: return "vpiAutomatics";
    case 766: return "vpiCoverMax";
    case 767: return "vpiCoveredCount";
    case 770: return "vpiAssertAttemptCovered";
    case 771: return "vpiAssertSuccessCovered";
    case 772: return "vpiAssertFailureCovered";
    case 773: return "vpiAssertVacuousSuccessCovered";
    case 774: return "vpiAssertDisableCovered";
    case 775: return "vpiFsmStates";
    case 776: return "vpiFsmStateExpression";
    case 777: return "vpiAssertKillCovered";
    case 10: return "vpiDefParam";
    case 901: return "vpiRestrict";
    case 11: return "vpiDelayControl";
    case 902: return "vpiClockedProp";
    case 12: return "vpiDisable";
    case 903: return "vpiLetDecl";
    case 13: return "vpiEventControl";
    case 904: return "vpiLetExpr";
    case 14: return "vpiEventStmt";
    case 905: return "vpiCasePropertyItem";
    case 15: return "vpiFor";
    case 16: return "vpiForce";
    case 17: return "vpiForever";
    case 18: return "vpiFork";
    case 20: return "vpiFunction";
    case 19: return "vpiFuncCall";
    case 21: return "vpiGate";
    case 22: return "vpiIf";
    case 23: return "vpiIfElse";
    case 24: return "vpiInitial";
    case 600: return "vpiPackage";
    case 25: return "vpiIntegerVar";
    case 601: return "vpiInterface";
    case 26: return "vpiInterModPath";
    case 602: return "vpiProgram";
    case 27: return "vpiIterator";
    case 603: return "vpiInterfaceArray";
    case 28: return "vpiIODecl";
    case 604: return "vpiProgramArray";
    case 30: return "vpiMemoryWord";
    case 29: return "vpiMemory";
    case 605: return "vpiTypespec";
    case 31: return "vpiModPath";
    case 606: return "vpiModport";
    case 32: return "vpiModule";
    case 607: return "vpiInterfaceTfDecl";
    case 33: return "vpiNamedBegin";
    case 608: return "vpiRefObj";
    case 34: return "vpiNamedEvent";
    case 609: return "vpiTypeParameter";
    case 610: return "vpiLongIntVar";
  }
}

#endif

static void release_handle(vpiHandle obj_h) {
#ifndef STANDARD_VPI
  vpi_release_handle(obj_h);
#endif
}
  
static std::string visit_value(s_vpi_value* value) {
  if (value == nullptr)
    return "";
  switch (value->format) {
  case vpiIntVal: {
    return std::string(std::string("|INT:") + std::to_string(value->value.integer) + "\n");
    break;
  }
  case vpiStringVal: {
    const char* s = (const char*) value->value.str;
    return std::string(std::string("|STRING:") + std::string(s) + "\n");
    break;
  }
  case vpiBinStrVal: {
    const char* s = (const char*) value->value.str;
    return std::string(std::string("|BIN:") + std::string(s) + "\n");
    break;
  }
  case vpiHexStrVal: {
    const char* s = (const char*) value->value.str;
    return std::string(std::string("|HEX:") + std::string(s) + "\n");
    break;
  }
  case vpiOctStrVal: {
    const char* s = (const char*) value->value.str;
    return std::string(std::string("|OCT:") + std::string(s) + "\n");
    break;
  }
  case vpiRealVal: {
    return std::string(std::string("|REAL:") + std::to_string(value->value.real) + "\n");
    break;
  }
  case vpiScalarVal: {
    return std::string(std::string("|SCAL:") + std::to_string(value->value.scalar) + "\n");
    break;
  }
  case vpiDecStrVal: {
    const char* s = (const char*) value->value.str;
    return std::string(std::string("|DEC:") + std::string(s) + "\n");
    break;
  }   
  default:
    break;
  }
  return "";
}

static std::string visit_delays(s_vpi_delay* delay) {
  if (delay == nullptr)
    return "";
  switch (delay->time_type) {
  case vpiScaledRealTime: {
    return std::string(std::string("|#") + std::to_string(delay->da[0].low) + "\n");
    break;
  }
  default:
    break;
  }
  return "";
}

static std::ostream &stream_indent(std::ostream &out, int indent) {
  out << std::string(indent, ' ');
  return out;
}

 void visit_object (vpiHandle obj_h, int indent, const char *relation, VisitedContainer* visited, std::ostream& out, bool shallowVisit = false) {
  if (!obj_h)
    return;
#ifdef STANDARD_VPI
  
  static int kLevelIndent = 2;
  const bool alreadyVisited = visited->find(obj_h) != visited->end();
  visited->insert(obj_h);

#else
  
  static constexpr int kLevelIndent = 2;
  const uhdm_handle* const handle = (const uhdm_handle*) obj_h;
  const BaseClass* const object = (const BaseClass*) handle->object;
  const bool alreadyVisited = (visited->find(object) != visited->end());
  if (!shallowVisit)
    visited->insert(object);
  
#endif
  
  unsigned int subobject_indent = indent + kLevelIndent;
  const unsigned int objectType = vpi_get(vpiType, obj_h);
 
  {
    std::string hspaces;
    std::string rspaces;
    if (indent >= kLevelIndent) {
      for (int i = 0; i < indent -2 ; i++) {
        hspaces += " ";
      }
      rspaces = hspaces + "|";
      hspaces += "\\_";
    }

    if (strlen(relation) != 0) {
      out << rspaces << relation << ":\n";
    }
    
#ifdef STANDARD_VPI
    
    out << hspaces << vpiTypeName(obj_h) << "(" << vpi_get(vpiType, obj_h) << "): ";

#else

    out << hspaces << UHDM::VpiTypeName(obj_h) << ": ";

#endif
    
    bool needs_separator = false;
    if (const char* s = vpi_get_str(vpiDefName, obj_h)) {  // defName
      out << s;
      needs_separator = true;
    }
    if (const char* s = vpi_get_str(vpiFullName, obj_h)) {   // objectName
      if (needs_separator) out << " ";
      out << "(" << s << ")";  // objectName
    } else if (const char* s = vpi_get_str(vpiName, obj_h)) {   // objectName
      if (needs_separator) out << " ";
      out << "(" << s << ")";  // objectName
    }

#ifndef STANDARD_VPI

    if (showIDs)
      out << ", id:" << object->UhdmId();

#endif    

    if (objectType == vpiModule || objectType == vpiProgram || objectType == vpiClassDefn || objectType == vpiPackage ||
        objectType == vpiInterface || objectType == vpiUdp) {
      if (const char* s = vpi_get_str(vpiFile, obj_h)) {
	if (int l = vpi_get(vpiLineNo, obj_h)) {
	  out << " " << s << ":" << l << ": ";  // fileName, line
	} else {
	   out << ", file:" << s;  // fileName
	}
      }
    } else {
      if (int l = vpi_get(vpiLineNo, obj_h)) {
	out << ", line:" << l;
      }
    }
    if (vpiHandle par = vpi_handle(vpiParent, obj_h)) {
      if (const char* parentName = vpi_get_str(vpiFullName, par)) {
        out << ", parent:" << parentName;
      } else if (const char* parentName = vpi_get_str(vpiName, par)) {
        out << ", parent:" << parentName;
      }
      if (showIDs) {
        const uhdm_handle* const phandle = (const uhdm_handle*) par;
        const BaseClass* const pobject = (const BaseClass*) phandle->object;
        out << ", parID:" << pobject->UhdmId();
      }
      vpi_free_object(par);
    }
    out << "\n";
  }

  if (alreadyVisited || shallowVisit) {
    return;
  }
  if (strcmp(relation, "vpiParent") == 0) {
    return;
  }
  if (objectType == vpiOrderedWait) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiCondition,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiCondition", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiEnumConst) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }


    return;
  }
  if (objectType == vpiReg) {

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiChandleVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiContAssign) {
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSwitchArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitive,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitive", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiTableEntry) {
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiEnumTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiBaseTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiBaseTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiEnumConst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiEnumConst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPropertyInst) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiPropertyDecl,obj_h);
    visit_object(itr, subobject_indent, "vpiPropertyDecl", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDisableCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiDisableCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiByteVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiClockedSeq) {

    vpiHandle itr;
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiSequenceExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiSequenceExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiEventTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiNamedEvent) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiWaitingProcesses,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiWaitingProcesses", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRepeatControl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiLetDecl) {


    return;
  }
  if (objectType == vpiAnyPattern) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";


    return;
  }
  if (objectType == vpiParamAssign) {
    if (const int n = vpi_get(vpiConnByName, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiAssume) {
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiIsClockInferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiProperty,obj_h);
    visit_object(itr, subobject_indent, "vpiProperty", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiIntegerVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiStringVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUserSystf) {


    return;
  }
  if (objectType == vpiClockingIODecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
    if (const int n = vpi_get(vpiInputEdge, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiInputEdge:" << n << "\n";
    if (const int n = vpi_get(vpiOutputEdge, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOutputEdge:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiInputSkew,obj_h);
    visit_object(itr, subobject_indent, "vpiInputSkew", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiOutputSkew,obj_h);
    visit_object(itr, subobject_indent, "vpiOutputSkew", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiShortIntVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiFunction) {
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    if (const int n = vpi_get(vpiFuncType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDPICIdentifier, obj_h))
      stream_indent(out, indent) << "|vpiDPICIdentifier:" << s << "\n";
    if (const int n = vpi_get(vpiMethod, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiMethod:" << n << "\n";
    if (const int n = vpi_get(vpiAccessType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVirtual, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiDPIPure, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPIPure:" << n << "\n";
    if (const int n = vpi_get(vpiDPIContext, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPIContext:" << n << "\n";
    if (const int n = vpi_get(vpiDPICStr, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPICStr:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiReturn,obj_h);
    visit_object(itr, subobject_indent, "vpiReturn", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClassDefn,obj_h);
    visit_object(itr, subobject_indent, "vpiClassDefn", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiImplication) {

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraintExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraintExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiCase) {
    if (const int n = vpi_get(vpiCaseType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiCaseType:" << n << "\n";
    if (const int n = vpi_get(vpiQualifier, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiCaseItem,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiCaseItem", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiIntVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPackage) {
    if (const int n = vpi_get(vpiUnit, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUnit:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefFile, obj_h))
      stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
    if (const char* s = vpi_get_str(vpiLibrary, obj_h))
      stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
    if (const char* s = vpi_get_str(vpiCell, obj_h))
      stream_indent(out, indent) << "|vpiCell:" << s << "\n";
    if (const char* s = vpi_get_str(vpiConfig, obj_h))
      stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiCellInstance, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
    if (const int n = vpi_get(vpiDefNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
    if (const int n = vpi_get(vpiDefLineNo, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";
    if (const int n = vpi_get(vpiDefDelayMode, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiTimePrecision, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
    if (const int n = vpi_get(vpiTimeUnit, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
    if (const int n = vpi_get(vpiUnconnDrive, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiTop, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTop:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiTaskFunc,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProgram,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgram", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgramArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgramArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiArrayNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArrayNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSpecParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSpecParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClassDefn,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClassDefn", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAssertion,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAssertion", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiLogicVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiIfElse) {
    if (const int n = vpi_get(vpiQualifier, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiAliasStmt) {


    return;
  }
  if (objectType == vpiClassDefn) {
    if (const int n = vpi_get(vpiVirtual, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiMethod,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMethod", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExtends,obj_h);
    visit_object(itr, subobject_indent, "vpiExtends", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraint,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraint", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDerivedClasses,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDerivedClasses", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClassTypespec,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClassTypespec", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiModuleArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstraintOrdering) {

    vpiHandle itr;
    itr = vpi_iterate(vpiSolveBefore,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSolveBefore", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSolveAfter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSolveAfter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiFor) {
    if (const int n = vpi_get(vpiLocalVarDecls, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiLocalVarDecls:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiForInitStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiForInitStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiForIncStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiForIncStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiForInitStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiForInitStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiForIncStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiForIncStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiCasePropertyItem) {

    vpiHandle itr;
    itr = vpi_iterate(vpiExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPropertyExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiPropertyExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPartSelect) {
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiParent,obj_h);
    visit_object(itr, subobject_indent, "vpiParent", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiForce) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSequenceDecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSeqFormalDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSeqFormalDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiNamedBegin) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiDisable) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiIndexedPartSelect) {
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiIndexedPartSelectType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIndexedPartSelectType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiBaseExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiBaseExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiWidthExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiWidthExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiGateArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitive,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitive", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiUnsupportedStmt) {
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiAlways) {
    if (const int n = vpi_get(vpiAlwaysType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAlwaysType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiIntegerTypespec) {
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiArrayTypespec) {
    if (const int n = vpi_get(vpiArrayType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndexTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElemTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiHierPath) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiActual,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiActual", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiWaitFork) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiBitVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiClassObj) {
    if (const int n = vpi_get(vpiObjId, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiObjId:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiMessages,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMessages", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTaskFunc,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiClassTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiClassTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiWaitingProcesses,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiWaitingProcesses", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConstraint,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraint", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiTchkTerm) {
    if (const int n = vpi_get(vpiEdge, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEdge:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiInterface) {
    if (const int n = vpi_get(vpiIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefFile, obj_h))
      stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
    if (const char* s = vpi_get_str(vpiLibrary, obj_h))
      stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
    if (const char* s = vpi_get_str(vpiCell, obj_h))
      stream_indent(out, indent) << "|vpiCell:" << s << "\n";
    if (const char* s = vpi_get_str(vpiConfig, obj_h))
      stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiCellInstance, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
    if (const int n = vpi_get(vpiDefNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
    if (const int n = vpi_get(vpiDefLineNo, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";
    if (const int n = vpi_get(vpiDefDelayMode, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiTimePrecision, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
    if (const int n = vpi_get(vpiTimeUnit, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
    if (const int n = vpi_get(vpiUnconnDrive, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiTop, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTop:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiInstanceArray,obj_h);
    visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProcess,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProcess", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterfaceTfDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterfaceTfDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiGlobalClocking,obj_h);
    visit_object(itr, subobject_indent, "vpiGlobalClocking", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDefaultClocking,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiModPath,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModPath", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClockingBlock,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterface,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterface", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterfaceArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPort,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPort", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiGenScopeArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiDefaultDisableIff,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiTaskFunc,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProgram,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgram", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgramArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgramArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiArrayNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArrayNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSpecParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSpecParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClassDefn,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClassDefn", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAssertion,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAssertion", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiReturn) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPropertyTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDesign) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    if (indent == 0) visited->clear();
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallPackages,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallPackages", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallClasses,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallClasses", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallInterfaces,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallInterfaces", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallUdps,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallUdps", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallPrograms,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallPrograms", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmallModules,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmallModules", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    if (indent == 0) visited->clear();
    itr = vpi_iterate(uhdmtopModules,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "uhdmtopModules", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiDistItem) {
    if (const int n = vpi_get(vpiDistType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDistType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiWeight,obj_h);
    visit_object(itr, subobject_indent, "vpiWeight", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiValueRange,obj_h);
    visit_object(itr, subobject_indent, "vpiValueRange", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiBitTypespec) {
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndexTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElemTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiStructVar) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiMember,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMember", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiModport) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiArrayNet) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiForever) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiInterfaceTfDecl) {
    if (const int n = vpi_get(vpiAccessType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiTask,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTask", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiFunction,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiFunction", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiShortRealVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPortBit) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiExplicitName, obj_h))
      stream_indent(out, indent) << "|vpiExplicitName:" << s << "\n";
    if (const int n = vpi_get(vpiPortIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPortIndex:" << n << "\n";
    if (const int n = vpi_get(vpiPortType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPortType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiConnByName, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedef,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedef", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiHighConn,obj_h);
    visit_object(itr, subobject_indent, "vpiHighConn", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLowConn,obj_h);
    visit_object(itr, subobject_indent, "vpiLowConn", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiImmediateAssume) {
    if (const int n = vpi_get(vpiIsDeferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
    if (const int n = vpi_get(vpiIsFinal, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiMethodFuncCall) {
    if (const int n = vpi_get(vpiUserDefn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiPrefix,obj_h);
    visit_object(itr, subobject_indent, "vpiPrefix", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiFunction,obj_h);
    visit_object(itr, subobject_indent, "vpiFunction", visited, out , true);
    release_handle(itr);
    itr = vpi_handle(vpiWith,obj_h);
    visit_object(itr, subobject_indent, "vpiWith", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiOperation) {
    if (const int n = vpi_get(vpiOpType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOpType:" << n << "\n";
    if (const int n = vpi_get(vpiOpStrong, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOpStrong:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiOperand,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiOperand", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiCaseItem) {

    vpiHandle itr;
    itr = vpi_iterate(vpiExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiAssignStmt) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPropertyDecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropFormalDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropFormalDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPropertySpec,obj_h);
    visit_object(itr, subobject_indent, "vpiPropertySpec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiNamedFork) {
    if (const int n = vpi_get(vpiJoinType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiJoinType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiDistribution) {
    if (const int n = vpi_get(vpiSoft, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSoft:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiDistItem,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDistItem", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPropFormalDecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiImport) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiImport,obj_h);
    visit_object(itr, subobject_indent, "vpiImport", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiIf) {
    if (const int n = vpi_get(vpiQualifier, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSwitch) {
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    s_vpi_delay delay;
    vpi_get_delays(obj_h, &delay);
    if (delay.da != nullptr) {
      stream_indent(out, indent) << visit_delays(&delay);
    }
    if (const int n = vpi_get(vpiPrimType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPrimType:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSeqFormalDecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiNullStmt) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiLetExpr) {
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiEnumNet) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiMethodTaskCall) {
    if (const int n = vpi_get(vpiUserDefn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiPrefix,obj_h);
    visit_object(itr, subobject_indent, "vpiPrefix", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTask,obj_h);
    visit_object(itr, subobject_indent, "vpiTask", visited, out , true);
    release_handle(itr);
    itr = vpi_handle(vpiWith,obj_h);
    visit_object(itr, subobject_indent, "vpiWith", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDefParam) {

    vpiHandle itr;
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiSpecParam) {
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTypespecMember) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDeassign) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiClassVar) {
    if (const int n = vpi_get(vpiObjId, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiObjId:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiClassObj,obj_h);
    visit_object(itr, subobject_indent, "vpiClassObj", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiVarSelect) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiGenScopeArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiGenVar,obj_h);
    visit_object(itr, subobject_indent, "vpiGenVar", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiGenScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTaggedPattern) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiPattern,obj_h);
    visit_object(itr, subobject_indent, "vpiPattern", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiGate) {
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    s_vpi_delay delay;
    vpi_get_delays(obj_h, &delay);
    if (delay.da != nullptr) {
      stream_indent(out, indent) << visit_delays(&delay);
    }
    if (const int n = vpi_get(vpiPrimType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPrimType:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiTask) {
    if (const char* s = vpi_get_str(vpiDPICIdentifier, obj_h))
      stream_indent(out, indent) << "|vpiDPICIdentifier:" << s << "\n";
    if (const int n = vpi_get(vpiMethod, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiMethod:" << n << "\n";
    if (const int n = vpi_get(vpiAccessType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVirtual, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiDPIPure, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPIPure:" << n << "\n";
    if (const int n = vpi_get(vpiDPIContext, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPIContext:" << n << "\n";
    if (const int n = vpi_get(vpiDPICStr, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDPICStr:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiReturn,obj_h);
    visit_object(itr, subobject_indent, "vpiReturn", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClassDefn,obj_h);
    visit_object(itr, subobject_indent, "vpiClassDefn", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiNamedEventArray) {


    return;
  }
  if (objectType == vpiImmediateCover) {
    if (const int n = vpi_get(vpiIsDeferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
    if (const int n = vpi_get(vpiIsFinal, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiTimeNet) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiVarBit) {
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiIODecl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypedef,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedef", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiInterfaceArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiShortRealTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiImmediateAssert) {
    if (const int n = vpi_get(vpiIsDeferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
    if (const int n = vpi_get(vpiIsFinal, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiParameter) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiConstType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstType:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiLocalParam, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiLocalParam:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiAttribute) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefFile, obj_h))
      stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
    if (const int n = vpi_get(vpiDefAttribute, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefAttribute:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }
    if (const int n = vpi_get(vpiDefLineNo, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";


    return;
  }
  if (objectType == vpiPort) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiExplicitName, obj_h))
      stream_indent(out, indent) << "|vpiExplicitName:" << s << "\n";
    if (const int n = vpi_get(vpiPortIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPortIndex:" << n << "\n";
    if (const int n = vpi_get(vpiPortType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPortType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiConnByName, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedef,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedef", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiHighConn,obj_h);
    visit_object(itr, subobject_indent, "vpiHighConn", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLowConn,obj_h);
    visit_object(itr, subobject_indent, "vpiLowConn", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiProgramArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiWhile) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRepeat) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiFork) {
    if (const int n = vpi_get(vpiJoinType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiJoinType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiStructTypespec) {
    if (const int n = vpi_get(vpiPacked, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiTypespecMember,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypespecMember", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiGenVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiGenScopeArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPackedArrayNet) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiElement,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiElement", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiFinal) {

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstant) {
    if (const int n = vpi_get(vpiConstType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDelayControl) {
    s_vpi_delay delay;
    vpi_get_delays(obj_h, &delay);
    if (delay.da != nullptr) {
      stream_indent(out, indent) << visit_delays(&delay);
    }
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPropertySpec) {

    vpiHandle itr;
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDisableCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiDisableCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiPropertyExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiPropertyExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPrimTerm) {
    if (const int n = vpi_get(vpiDirection, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
    if (const int n = vpi_get(vpiTermIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTermIndex:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiExpectStmt) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiEventControl) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiClassTypespec) {
    if (const int n = vpi_get(vpiClassType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiClassType:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMethod,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMethod", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExtends,obj_h);
    visit_object(itr, subobject_indent, "vpiExtends", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraint,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraint", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiClassDefn,obj_h);
    visit_object(itr, subobject_indent, "vpiClassDefn", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPathTerm) {

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSequenceTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstrIfElse) {

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraintExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraintExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiElseConst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiElseConst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRestrict) {
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiIsClockInferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiProperty,obj_h);
    visit_object(itr, subobject_indent, "vpiProperty", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiByteTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiExtends) {

    vpiHandle itr;
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiClassTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiClassTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiRealVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiVirtualInterfaceVar) {


    return;
  }
  if (objectType == vpiRefObj) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const int n = vpi_get(vpiGeneric, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiGeneric:" << n << "\n";
    if (const int n = vpi_get(vpiStructMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTaskFunc,obj_h);
    visit_object(itr, subobject_indent, "vpiTaskFunc", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiActual,obj_h);
    visit_object(itr, subobject_indent, "vpiActual", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstrForEach) {

    vpiHandle itr;
    itr = vpi_handle(vpiVariables,obj_h);
    visit_object(itr, subobject_indent, "vpiVariables", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraintExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraintExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoopVars,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoopVars", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRelease) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiTypeParameter) {
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiLocalParam, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiLocalParam:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiFuncCall) {
    if (const int n = vpi_get(vpiFuncType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiFunction,obj_h);
    visit_object(itr, subobject_indent, "vpiFunction", visited, out , true);
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiCover) {
    if (const int n = vpi_get(vpiIsCoverSequence, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsCoverSequence:" << n << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiIsClockInferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiProperty,obj_h);
    visit_object(itr, subobject_indent, "vpiProperty", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiArrayVar) {
    if (const int n = vpi_get(vpiArrayType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayType:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVarSelect,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVarSelect", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiWait) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiIntegerNet) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstraint) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiVirtual, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiAccessType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
    if (const int n = vpi_get(vpiIsConstraintEnabled, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsConstraintEnabled:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConstraintItem,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraintItem", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiInterfaceTypespec) {
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const int n = vpi_get(vpiIsModPort, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsModPort:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiContAssignBit) {
    if (const int n = vpi_get(vpiOffset, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOffset:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiVoidTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUnsupportedExpr) {
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUdpArray) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitive,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitive", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInstance,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInstance", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiProgram) {
    if (const int n = vpi_get(vpiIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefFile, obj_h))
      stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
    if (const char* s = vpi_get_str(vpiLibrary, obj_h))
      stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
    if (const char* s = vpi_get_str(vpiCell, obj_h))
      stream_indent(out, indent) << "|vpiCell:" << s << "\n";
    if (const char* s = vpi_get_str(vpiConfig, obj_h))
      stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiCellInstance, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
    if (const int n = vpi_get(vpiDefNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
    if (const int n = vpi_get(vpiDefLineNo, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";
    if (const int n = vpi_get(vpiDefDelayMode, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiTimePrecision, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
    if (const int n = vpi_get(vpiTimeUnit, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
    if (const int n = vpi_get(vpiUnconnDrive, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiTop, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTop:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiInstanceArray,obj_h);
    visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProcess,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProcess", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiDefaultClocking,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiInterface,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterface", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterfaceArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClockingBlock,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPort,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPort", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiGenScopeArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiDefaultDisableIff,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiTaskFunc,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProgram,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgram", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgramArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgramArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiArrayNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArrayNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSpecParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSpecParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClassDefn,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClassDefn", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAssertion,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAssertion", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiUnionVar) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiMember,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMember", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTchk) {
    s_vpi_delay delay;
    vpi_get_delays(obj_h, &delay);
    if (delay.da != nullptr) {
      stream_indent(out, indent) << visit_delays(&delay);
    }
    if (const int n = vpi_get(vpiTchkType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTchkType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkRefTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkRefTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkDataTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkDataTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkNotifier,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkNotifier", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRange) {
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiBitSelect) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiModule) {
    if (const int n = vpi_get(vpiIndex, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
    if (const int n = vpi_get(vpiTopModule, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTopModule:" << n << "\n";
    if (const int n = vpi_get(vpiDefDecayTime, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefDecayTime:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDefFile, obj_h))
      stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
    if (const char* s = vpi_get_str(vpiLibrary, obj_h))
      stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
    if (const char* s = vpi_get_str(vpiCell, obj_h))
      stream_indent(out, indent) << "|vpiCell:" << s << "\n";
    if (const char* s = vpi_get_str(vpiConfig, obj_h))
      stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiCellInstance, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
    if (const int n = vpi_get(vpiDefNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
    if (const int n = vpi_get(vpiDefLineNo, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";
    if (const int n = vpi_get(vpiDefDelayMode, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiTimePrecision, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
    if (const int n = vpi_get(vpiTimeUnit, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
    if (const int n = vpi_get(vpiUnconnDrive, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiTop, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTop:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiInstanceArray,obj_h);
    visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProcess,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProcess", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitive,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitive", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitiveArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitiveArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiGlobalClocking,obj_h);
    visit_object(itr, subobject_indent, "vpiGlobalClocking", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDefaultClocking,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiModuleArray,obj_h);
    visit_object(itr, subobject_indent, "vpiModuleArray", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPort,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPort", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterface,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterface", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterfaceArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModuleArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModuleArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModPath,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModPath", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchk,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchk", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDefParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDefParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAliasStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAliasStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClockingBlock,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiGenScopeArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiDefaultDisableIff,obj_h);
    visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiTaskFunc,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiProgram,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgram", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgramArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgramArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiArrayNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArrayNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSpecParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSpecParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClassDefn,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClassDefn", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAssertion,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAssertion", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiLongIntTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiSoftDisable) {

    vpiHandle itr;
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiCaseProperty) {

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiCasePropertyItem,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiCasePropertyItem", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiClockedProp) {

    vpiHandle itr;
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiPropertyExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiPropertyExpr", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiStructPattern) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiPattern,obj_h);
    visit_object(itr, subobject_indent, "vpiPattern", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiLogicNet) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTaskCall) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiTask,obj_h);
    visit_object(itr, subobject_indent, "vpiTask", visited, out , true);
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiAssert) {
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiIsClockInferred, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElseStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiElseStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiProperty,obj_h);
    visit_object(itr, subobject_indent, "vpiProperty", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiLogicTypespec) {
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndexTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiElemTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiBreak) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiSysFuncCall) {
    if (const int n = vpi_get(vpiFuncType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
    if (const int n = vpi_get(vpiUserDefn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiUserSystf,obj_h);
    visit_object(itr, subobject_indent, "vpiUserSystf", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiEnumVar) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUnsupportedTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiConstrIf) {

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConstraintExpr,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConstraintExpr", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiIntTypespec) {
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiPackedArrayTypespec) {
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndexTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiElemTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUnionTypespec) {
    if (const int n = vpi_get(vpiPacked, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
    if (const int n = vpi_get(vpiTagged, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiTagged:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiTypespecMember,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypespecMember", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiEventStmt) {
    if (const int n = vpi_get(vpiBlocking, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiBlocking:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiNamedEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiNamedEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiGenScope) {
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProcess,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProcess", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitive,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitive", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimitiveArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimitiveArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiArrayNet,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArrayNet", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModule,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModule", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiModuleArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiModuleArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDefParam,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDefParam", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiGenScopeArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgram,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgram", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiProgramArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiProgramArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterface,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterface", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInterfaceArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAliasStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAliasStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiClockingBlock,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAssertion,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAssertion", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiUdpDefn) {
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    if (const int n = vpi_get(vpiProtected, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
    if (const int n = vpi_get(vpiPrimType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPrimType:" << n << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTableEntry,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTableEntry", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInitial,obj_h);
    visit_object(itr, subobject_indent, "vpiInitial", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiNetBit) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDelayTerm) {


    return;
  }
  if (objectType == vpiSequenceInst) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const int n = vpi_get(vpiStartLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
    if (const int n = vpi_get(vpiColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
    if (const int n = vpi_get(vpiEndLine, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
    if (const int n = vpi_get(vpiEndColumn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiSequenceDecl,obj_h);
    visit_object(itr, subobject_indent, "vpiSequenceDecl", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingBlock,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiArgument,obj_h);
    visit_object(itr, subobject_indent, "vpiArgument", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiShortIntTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTimeVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiThread) {


    return;
  }
  if (objectType == vpiInitial) {

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiDoWhile) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiCondition,obj_h);
    visit_object(itr, subobject_indent, "vpiCondition", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiStringTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiSysTaskCall) {
    if (const int n = vpi_get(vpiUserDefn, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiUserSystf,obj_h);
    visit_object(itr, subobject_indent, "vpiUserSystf", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiArgument,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiArgument", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiModPath) {

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiForeachStmt) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiVariables,obj_h);
    visit_object(itr, subobject_indent, "vpiVariables", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiLoopVars,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoopVars", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiStmt,obj_h);
    visit_object(itr, subobject_indent, "vpiStmt", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiAssignment) {
    if (const int n = vpi_get(vpiOpType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOpType:" << n << "\n";
    if (const int n = vpi_get(vpiBlocking, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiBlocking:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLhs,obj_h);
    visit_object(itr, subobject_indent, "vpiLhs", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDelayControl,obj_h);
    visit_object(itr, subobject_indent, "vpiDelayControl", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiEventControl,obj_h);
    visit_object(itr, subobject_indent, "vpiEventControl", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRepeatControl,obj_h);
    visit_object(itr, subobject_indent, "vpiRepeatControl", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRhs,obj_h);
    visit_object(itr, subobject_indent, "vpiRhs", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiStructNet) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiExpanded, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
    if (const int n = vpi_get(vpiImplicitDecl, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
    if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
    if (const int n = vpi_get(vpiNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
    if (const int n = vpi_get(vpiResolvedNetType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitScalared, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    if (const int n = vpi_get(vpiChargeStrength, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const int n = vpi_get(vpiExplicitVectored, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiMember,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMember", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLocalLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiSimNet,obj_h);
    visit_object(itr, subobject_indent, "vpiSimNet", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPathTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPathTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTchkTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiTimeTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiContinue) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiPackedArrayVar) {
    if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiConstantSelect, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
    if (const int n = vpi_get(vpiPacked, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiRange,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRange", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiBit,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiBit", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiElement,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiElement", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiRegArray) {
    if (const int n = vpi_get(vpiIsMemory, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsMemory:" << n << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiLeftRange,obj_h);
    visit_object(itr, subobject_indent, "vpiLeftRange", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiRightRange,obj_h);
    visit_object(itr, subobject_indent, "vpiRightRange", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiMemoryWord,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemoryWord", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiBegin) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_iterate(vpiStmt,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiStmt", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiRealTypespec) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiTypedefAlias,obj_h);
    visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiUdp) {
    if (const char* s = vpi_get_str(vpiDefName, obj_h))
      stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    s_vpi_delay delay;
    vpi_get_delays(obj_h, &delay);
    if (delay.da != nullptr) {
      stream_indent(out, indent) << visit_delays(&delay);
    }
    if (const int n = vpi_get(vpiPrimType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiPrimType:" << n << "\n";
    if (const int n = vpi_get(vpiStrength0, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
    if (const int n = vpi_get(vpiStrength1, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_handle(vpiUdpDefn,obj_h);
    visit_object(itr, subobject_indent, "vpiUdpDefn", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiDelay,obj_h);
    visit_object(itr, subobject_indent, "vpiDelay", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiIndex,obj_h);
    visit_object(itr, subobject_indent, "vpiIndex", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiLongIntVar) {
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
    if (const int n = vpi_get(vpiArrayMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
    if (const int n = vpi_get(vpiSigned, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
    if (const int n = vpi_get(vpiAutomatic, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
    if (const int n = vpi_get(vpiAllocScheme, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
    if (const int n = vpi_get(vpiConstantVariable, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
    if (const int n = vpi_get(vpiIsRandomized, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
    if (const int n = vpi_get(vpiRandType, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
    if (const int n = vpi_get(vpiStructUnionMember, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
    if (const int n = vpi_get(vpiScalar, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
    if (const int n = vpi_get(vpiVisibility, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
    if (const int n = vpi_get(vpiVector, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiVector:" << n << "\n";
    if (const char* s = vpi_get_str(vpiDecompile, obj_h))
      stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
    if (const int n = vpi_get(vpiSize, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiSize:" << n << "\n";
    s_vpi_value value;
    vpi_get_value(obj_h, &value);
    if (value.format) {
      std::string val = visit_value(&value);
      if (!val.empty()) {
        stream_indent(out, indent) << val;
      }
    }

    vpiHandle itr;
    itr = vpi_iterate(vpiPortInst,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPortInst", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiScope,obj_h);
    visit_object(itr, subobject_indent, "vpiScope", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiExpr,obj_h);
    visit_object(itr, subobject_indent, "vpiExpr", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiIndex,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiIndex", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPrimTerm,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiContAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiContAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPathTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiPathTerm", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiTchkTerm,obj_h);
    visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiDriver,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiDriver", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLoad,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLoad", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiTypespec,obj_h);
    visit_object(itr, subobject_indent, "vpiTypespec", visited, out );
    release_handle(itr);

    return;
  }
  if (objectType == vpiClockingBlock) {
    if (const int n = vpi_get(vpiInputEdge, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiInputEdge:" << n << "\n";
    if (const int n = vpi_get(vpiOutputEdge, obj_h))
      if (n != -1)
        stream_indent(out, indent) << "|vpiOutputEdge:" << n << "\n";
    if (const char* s = vpi_get_str(vpiName, obj_h))
      stream_indent(out, indent) << "|vpiName:" << s << "\n";
    if (const char* s = vpi_get_str(vpiFullName, obj_h))
      stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

    vpiHandle itr;
    itr = vpi_handle(vpiInstance,obj_h);
    visit_object(itr, subobject_indent, "vpiInstance", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiInputSkew,obj_h);
    visit_object(itr, subobject_indent, "vpiInputSkew", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiOutputSkew,obj_h);
    visit_object(itr, subobject_indent, "vpiOutputSkew", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiClockingEvent,obj_h);
    visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiClockingIODecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockingIODecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_handle(vpiPrefix,obj_h);
    visit_object(itr, subobject_indent, "vpiPrefix", visited, out );
    release_handle(itr);
    itr = vpi_handle(vpiActual,obj_h);
    visit_object(itr, subobject_indent, "vpiActual", visited, out );
    release_handle(itr);
    itr = vpi_iterate(vpiConcurrentAssertions,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVariables,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVariables", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiInternalScope,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiInternalScope", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiTypedef,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiTypedef", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiPropertyDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiSequenceDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEvent,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiNamedEventArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiVirtualInterfaceVar,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiReg,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiReg", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiRegArray,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiRegArray", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiMemory,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiMemory", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParamAssign,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParamAssign", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiLetDecl,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiLetDecl", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiAttribute,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiAttribute", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiParameter,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiParameter", visited, out );
      release_handle(obj);
    }
    release_handle(itr);
    itr = vpi_iterate(vpiImport,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiImport", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }
  if (objectType == vpiMulticlockSequenceExpr) {

    vpiHandle itr;
    itr = vpi_iterate(vpiClockedSeq,obj_h);
    while (vpiHandle obj = vpi_scan(itr) ) {
      visit_object(obj, subobject_indent, "vpiClockedSeq", visited, out );
      release_handle(obj);
    }
    release_handle(itr);

    return;
  }

}

// Public interface
void visit_designs (const std::vector<vpiHandle>& designs, std::ostream &out) {
  for (auto design : designs) {
    VisitedContainer visited;
    visit_object(design, 0, "", &visited, out);
  }
}

std::string visit_designs (const std::vector<vpiHandle>& designs) {
  std::stringstream out;
  visit_designs(designs, out);
  return out.str();
}

};

void vpi_show_ids(bool show) {
  showIDs = show;
}

static std::stringstream the_output;

extern "C" { 
  void vpi_decompiler (vpiHandle design) {
    std::vector<vpiHandle> designs;
    designs.push_back(design);
    UHDM::visit_designs(designs, the_output);
    std::cout << the_output.str().c_str() << std::endl;
  }
  
}
